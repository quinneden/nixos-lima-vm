name: Build NixOS disk image

on:
  workflow_dispatch:

jobs:
  build-aarch64:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@main

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            system = aarch64-linux
            trusted-users = *
            experimental-features = nix-command flakes

      - name: Setup qemu
        run: |
          sudo apt-get update
          sudo apt-get install -y qemu-system-aarch64 qemu-efi binfmt-support qemu-user-static
          sudo mount -o remount,size=15G /run

      - name: nix build .#packages.aarch64-linux.img
        run: |
          sudo systemctl restart nix-daemon.service
          sudo systemctl daemon-reload
          nix build -L .#packages.aarch64-linux.img
          cp $(readlink result)/nixos.img ./nixos-aarch64.img
          chmod 644 ./nixos-aarch64.img

      - uses: actions/upload-artifact@main
        with:
          name: nixos-aarch64
          path: ./nixos-aarch64.img

  build-x86_64:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@main

      - name: Install Nix
        uses: DeterminateSystems/nix-installer-action@main
        with:
          extra-conf: |
            trusted-users = *
            experimental-features = nix-command flakes

      - name: nix build .#packages.x86_64-linux.img
        run: |
          sudo mount -o remount,size=15G /run
          sudo systemctl restart nix-daemon.service
          nix build -L .#packages.x86_64-linux.img
          cp $(readlink result)/nixos.img ./nixos-x86_64.img
          chmod 644 ./nixos-x86_64.img

      - uses: actions/upload-artifact@main
        with:
          name: nixos-x86_64
          path: ./nixos-x86_64.img

  release:
    runs-on: ubuntu-latest

    needs: [build-aarch64, build-x86_64]

    steps:
      - uses: actions/checkout@main

      - name: set build date variable
        id: date-env
        run: |
          DATE=$(date "+%Y-%m-%d")
          echo "build_date=$(printf $DATE)" >> "$GITHUB_ENV"

      - uses: actions/download-artifact@main
        with:
          path: .
          merge-multiple: true

      - name: release
        uses: softprops/action-gh-release@v2.0.8
        with:
          token: ${{ github.token }}
          tag_name: release-${{ steps.date-env.build_date }}
          name: release-${{ steps.date-env.build_date }}
          files: ./{nixos-x86_64.zip,nixos-aarch64.zip}
          draft: true
